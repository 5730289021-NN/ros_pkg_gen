/**
* @file {nodeName}_common.cpp
* @author {packageAuthor}
*
* Copyright (C) {packageCopyright}
*
* @brief {packageDescription}
*        This file is to be edited by the Developer
**/

#include "ros/ros.h"
#include <iostream>

{ifdynParameter}
#include <dynamic_reconfigure/server.h>
#include <{packageName}/{nodeName}Config.h>

{endifdynParameter}
// ROS message & services includes
{foralldirectPublisher}
#include <{apply-get_cpp_path}.h>
{endforalldirectPublisher}
{foralldirectSubscriber}
#include <{apply-get_cpp_path}.h>
{endforalldirectSubscriber}
{forallserviceServer}
#include <{apply-get_cpp_path}.h>
{endforallserviceServer}
{forallserviceClient}
#include <{apply-get_cpp_path}.h>
{endforallserviceClient}

{iflistener}
#include <tf/transform_listener.h>
{endiflistener}
{ifbroadcaster}
#include <tf/transform_broadcaster.h>
{endifbroadcaster}

/* protected region user include files begin */
/* protected region user include files end */

/**
 * @class {apply-capitalized_node_name}Config
 * @brief set of static and dynamic parameters
 * @warning this class is autogenerated. It should not be touched!
 */
class {apply-capitalized_node_name}Config
{
public:
    {ifparameter}
    // parameters handled through the parameter server
    {endifparameter}
    {forallparameter}
    {type} {name};
    {endforallparameter}
    {ifdynParameter}
    // dynamic parameters handled through dynamic reconfigure
    {endifdynParameter}
    {foralldynParameter}
    {type} {name};
    {endforalldynParameter}
    //! overloading the print operator
    friend std::ostream& operator<< (std::ostream& os,
                                     const {apply-capitalized_node_name}Config& config)
    {
        {forallparameter}
        os << "{name}: " << config.{name} << std::endl;
        {endforallparameter}
        {foralldynParameter}
        os << "{name}: " << config.{name} << std::endl;
        {endforalldynParameter}
        return os;
    }
};

/**
 * @class {apply-capitalized_node_name}Passthrough
 * @brief set of passthrough elements slightly violating interface / implementation separation
 * @warning this class is autogenerated. It should not be touched!
 */
class {apply-capitalized_node_name}Passthrough
{
public:
    {foralllistener}
    tf::TransformListener {name};
    {endforalllistener}
    {forallbroadcaster}
    tf::TransformBroadcaster {name};
    {endforallbroadcaster}
    {foralldirectPublisher}
    ros::Publisher {name};
    {endforalldirectPublisher}
    {foralldirectSubscriber}
    ros::Subscriber {name};
    {endforalldirectSubscriber}
    {forallserviceClient}
    ros::ServiceClient client_{name};
    {endforallserviceClient}
    /**
     * @brief constructor
     */
    {apply-capitalized_node_name}Passthrough()
    {
    }
    /**
     * @brief destructor
     */
    ~{apply-capitalized_node_name}Passthrough()
    {
    }
};
/**
 * @class {apply-capitalized_node_name}Impl
 * @brief Implementation of the node intelligence
 * @warning this class is be filled by the Developer, at locations indicated
 */
class {apply-capitalized_node_name}Impl
{
    /* protected region user member variables begin */
    /* protected region user member variables end */

public:
    {apply-capitalized_node_name}Passthrough passthrough;

    /**
     * @brief constructor
     */
    {apply-capitalized_node_name}Impl()
    {
        /* protected region user constructor begin */
        /* protected region user constructor end */
    }
    /**
     * @brief destructor
     */
    ~{apply-capitalized_node_name}Impl()
    {
        /* protected region user destructor begin */
        /* protected region user destructor end */
    }
    /**
     * @brief method called at node configuration
     * @param config set of configuration parameters available
     */
    bool configure({apply-capitalized_node_name}Config config)
    {
        /* protected region user configure begin */
        return true;
        /* protected region user configure end */
    }

    {forallserviceServer}
    /**
     * @brief callback of a service request
     * @param req input parameters provided by the caller
     * @param res output parameters resulting from the service execution
     * @param config latest state of the config variables
     */
    bool callback_{name}({type}::Request  &req, {type}::Response &res , {apply-capitalized_node_name}Config * config)
    {
        /* protected region user implementation of service callback for {name} begin */
        /* protected region user implementation of service callback for {name} end */
        return true;
    }
    {endforallserviceServer}
    {foralldirectSubscriber}
    /**
     * @brief direct callback of a topic subscription
     * @param msg message received on the topic
     * @warning this subscription is not driven through the update mechanism
     */
    void directTopicCallback_{name}(const {type}::ConstPtr& msg)
    {
        /* protected region user implementation of direct subscriber callback for {name} begin */
        /* protected region user implementation of direct subscriber callback for {name} end */
    }
    {endforalldirectSubscriber}
    /* protected region user additional functions begin */
    /* protected region user additional functions end */
};
