#!/usr/bin/env python
"""
@package {packageName}
@file {nodeName}_impl.py
@author {packageAuthor}
@brief {packageDescription}

Copyright (C) {packageCopyright}
{packageLicense}
"""

import rospy
{forallpublisher}
from {apply-get_package_type}.msg import {apply-get_class_type}
{endforallpublisher}
{forallsubscriber}
from {apply-get_package_type}.msg import {apply-get_class_type}
{endforallsubscriber}
{foralldirectPublisher}
from {apply-get_package_type}.msg import {apply-get_class_type}
{endforalldirectPublisher}
{foralldirectSubscriber}
from {apply-get_package_type}.msg import {apply-get_class_type}
{endforalldirectSubscriber}
{forallserviceServer}
from {apply-get_package_type}.srv import {apply-get_class_type}, {apply-get_class_type}Response
{endforallserviceServer}
{forallserviceClient}
from {apply-get_package_type}.srv import {apply-get_class_type}, {apply-get_class_type}Request
{endforallserviceClient}
{forallactionServer}
from {apply-get_package_type}.msg import {apply-get_class_type}Feedback, {apply-get_class_type}Result
{endforallactionServer}
{forallactionClient}
from {apply-get_package_type}.msg import {apply-get_class_type}Goal, {apply-get_class_type}Feedback, {apply-get_class_type}Result
{endforallactionClient}
{iflistener}
import tf
{endiflistener}
{ifbroadcaster}
import tf
{endifbroadcaster}

# protected region user include package begin #
# protected region user include package end #


class {apply-capitalized_node_name}Config(object):
    """
    set of static and dynamic parameters
    autogenerated: don't touch this class
    """
    def __init__(self):
        {ifparameter}
        # parameters handled through the parameter server
        {endifparameter}
        {forallparameter}
        self.{name} = {apply-get_py_param_value}
        {endforallparameter}
        {ifdynParameter}
        # parameters handled through dynamic reconfigure
        {endifdynParameter}
        {foralldynParameter}
        self.{name} = {apply-get_py_param_value}
        {endforalldynParameter}
        pass

    def __str__(self):
        msg = "Instance of {apply-capitalized_node_name}Config class: {"
        {forallparameter}
        msg += "{name}: {} ".format(self.{name})
        {endforallparameter}
        {foralldynParameter}
        msg += "{name}: {} ".format(self.{name})
        {endforalldynParameter}
        msg += "}"
        return msg


class {apply-capitalized_node_name}Data(object):
    """
    set of input / output handled through the update methods
    autogenerated: don't touch this class
    """
    def __init__(self):
        """
        Definition of the {apply-capitalized_node_name}Data attributes
        """
        {ifsubscriber}
        # input data
        {endifsubscriber}
        {forallsubscriber}
        self.in_{name} = {apply-get_class_type}()
        self.in_{name}_updated = bool()
        {endforallsubscriber}
        {ifpublisher}
        # output data
        {endifpublisher}
        {forallpublisher}
        self.out_{name} = {apply-get_class_type}()
        self.out_{name}_active = bool()
        {endforallpublisher}
        pass

    def __str__(self):
        msg = "Instance of {apply-capitalized_node_name}Data class: \n {"
        {forallsubscriber}
        msg += "in_{name}: {} \n".format(self.in_{name})
        msg += "in_{name}_updated: {} \n".format(self.in_{name}_updated)
        {endforallsubscriber}
        {forallpublisher}
        msg += "out_{name}: {} \n".format(self.out_{name}_active)
        msg += "out_{name}_active: {} \n".format(self.out_{name}_active)
        {endforallpublisher}
        msg += "}"
        return msg


class {apply-capitalized_node_name}Passthrough(object):
    """
    set of passthrough elements slightly violating interface / implementation separation
    Autogenerated: don't touch this class
    """
    def __init__(self):
        """ Class to contain variable breaking the interface separation
        """
        {foralllistener}
        self.{name} = tf.TransformListener()
        {endforalllistener}
        {forallbroadcaster}
        self.{name} = tf.TransformBroadcaster()
        {endforallbroadcaster}
        {forallserviceClient}
        self.client_{name} = None
        {endforallserviceClient}
        {forallactionServer}
        self.as_{name} = None
        {endforallactionServer}
        {forallactionClient}
        self.ac_{name} = None
        {endforallactionClient}
        {foralldirectPublisher}
        self.pub_{name} = None
        {endforalldirectPublisher}
        {foralldirectSubscriber}
        self.sub_{name} = None
        {endforalldirectSubscriber}
        pass


class {apply-capitalized_node_name}Implementation(object):
    """
    Class to contain Developer implementation.
    """
    def __init__(self):
        """
        Definition and initialisation of class attributes
        """
        self.passthrough = {apply-capitalized_node_name}Passthrough()

        # protected region user member variables begin #
        # protected region user member variables end #

    def configure(self, config):
        """
        @brief configuration of the implementation
        @param      self The object
        @param      config set of configuration parameters
        @return True on success
        """
        # protected region user configure begin #
        return True
        # protected region user configure end #

    def update(self, data, config):
        """
        @brief { function_description }

        @param      self The object
        @param      data data handled through the ros class
        @param      config parameters handled through dyn. recon.

        @return nothing
        """
        # protected region user update begin #
        # can be removed once filled
        pass
        # protected region user update end #

    {forallserviceServer}
    def callback_{name}(self, req):
        """
        @brief callback of service {name}

        @param self The object
        @param req({apply-get_class_type}) input parameter

        @return ({apply-get_class_type}Response) service output
        """
        result = {apply-get_class_type}Response()
        # protected region user implementation of service callback for {name} begin #
        # protected region user implementation of service callback for {name} end #
        return result

    {endforallserviceServer}
    {forallactionServer}
    def callback_{name}(self, goal):
        """
        @brief callback of service {name}

        @param self The object
        @param goal({apply-get_class_type}) goal provided

        @return ({apply-get_class_type}Response) action output
        @warning may send some feedback during the task execution
        """

        # protected region user implementation of action callback for {name} begin #
        # to provide feedback during action execution
        # to send the feedback, one should use:
        # self.passthrough.as_{name}.publish_feedback(feedback)
        feedback = {apply-get_class_type}Feedback()
        # to contain the outcome of the task at completion
        # to send the result, one should use:
        # on suceess:
        # self.passthrough.as_{name}.set_succeeded(result)
        result = {apply-get_class_type}Result()
        # Remind that preemption request should be checked during action execution:
        # if self.passthrough.as_{name}.is_preempt_requested():
        #        rospy.loginfo('Preempted action {name}')
        #        self.passthrough.as_{name}.set_preempted()
        #        success = False
        #        break
        # protected region user implementation of action callback for {name} end #

    {endforallactionServer}
    {foralldirectSubscriber}
    def direct_topic_callback_{name}(self, msg):
        """
        Direct callback at reception of message on topic {name}
        """
        # protected region user implementation of direct subscriber callback for {name} begin #
        # protected region user implementation of direct subscriber callback for {name} end #
        pass
    {endforalldirectSubscriber}
    # protected region user additional functions begin #
    # protected region user additional functions end #
