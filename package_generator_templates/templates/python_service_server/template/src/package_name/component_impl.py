#!/usr/bin/env python
"""
@package {packageName}
@file {componentName}_impl.py
@author {packageAuthor}
@brief {packageDescription}

Copyright (C) {packageCopyright}
{packageLicense}
"""

import rospy
{forallserviceServer}
from {apply-get_package_type}.srv import {apply-get_class_type}, {apply-get_class_type}Response
{endforallserviceServer}
{iflistener}
import tf
{endiflistener}
{ifbroadcaster}
import tf
{endifbroadcaster}

# protected region user include package begin #
# protected region user include package end #


class {apply-capitalized_comp_name}Config(object):
    """
    set of static and dynamic parameters
    autogenerated: don't touch this class
    """
    def __init__(self):
        {ifparameter}
        # parameters handled through the parameter server
        {endifparameter}
        {forallparameter}
        self.{name} = {apply-get_py_param_value}
        {endforallparameter}
        {ifdynParameter}
        # parameters handled through dynamic reconfigure
        {endifdynParameter}
        {foralldynParameter}
        self.{name} = {apply-get_py_param_value}
        {endforalldynParameter}
        pass

    def __str__(self):
        msg = "Instance of {apply-capitalized_comp_name}Config class: {"
        {forallparameter}
        msg += "{name}: {} ".format(self.{name})
        {endforallparameter}
        {foralldynParameter}
        msg += "{name}: {} ".format(self.{name})
        {endforalldynParameter}
        msg += "}"
        return msg


class {apply-capitalized_comp_name}Passthrough(object):
    """
    set of passthrough elements slightly violating interface / implementation separation
    Autogenerated: don't touch this class
    """
    def __init__(self):
        """ Class to contain variable breaking the interface separation
        """
        {foralllistener}
        self.{name} = tf.TransformListener()
        {endforalllistener}
        {forallbroadcaster}
        self.{name} = tf.TransformBroadcaster()
        {endforallbroadcaster}
        pass


class {apply-capitalized_comp_name}Implementation(object):
    """
    Class to contain Developer implementation.
    """
    def __init__(self):
        """
        Definition and initialisation of class attributes
        """
        self.passthrough = {apply-capitalized_comp_name}Passthrough()

        # protected region user member variables begin #
        # protected region user member variables end #

    def configure(self, config):
        """
        @brief configuration of the implementation
        @param      self The object
        @param      config set of configuration parameters
        @return True on success
        """
        # protected region user configure begin #
        return True
        # protected region user configure end #


    {forallserviceServer}
    def callback_{name}(self, req):
        """
        @brief callback of service {name}

        @param self The object
        @param req({apply-get_class_type}) input parameter

        @return ({apply-get_class_type}Response) service output
        """
        result = {apply-get_class_type}Response()
        # protected region user implementation of service callback for {name} begin #
        # protected region user implementation of service callback for {name} end #
        return result

    {endforallserviceServer}
    # protected region user additional functions begin #
    # protected region user additional functions end #
